namespace = distar

#################################
#
# Anomaly Events
# by Dee Majek
#
#################################

# root = ship scope
# from = planet scope

### Supply Wreckage ###
ship_event = {
	id = distar.1
	title = "distar.1.name"
	desc = "distar.1.desc"
	picture = GFX_evt_space_debris
	show_sound = event_ship_bridge
	location = event_target:supply_wreckage_tar

	is_triggered_only = yes

	trigger = {
		owner = {
			any_neighbor_country = {
				is_ai = yes
				is_zofe_compatible = yes
				is_homicidal = no
				has_communications = prev
				NOR = {
					is_at_war_with = prev
					is_same_value = prev
				}
			}
		}
	}

	immediate = {
		create_ambient_object = {
			type = "abandoned_ship_object"
			location = from
		}
		last_created_ambient_object = {
			save_event_target_as = supply_wreckage_tar
			set_location = {
				target = from
				distance = 5
				angle = 90
			}
		}
		owner = {
			random_neighbor_country = {
				limit = {
					is_zofe_compatible = yes
					is_homicidal = no
					has_communications = prev
					NOR = {
						is_at_war_with = prev
						is_country = prev
					}
					any_system = { has_access_fleet = prev }
				}
				save_event_target_as = wreckage_owner
			}
		}
	}
	option = {
		name = "distar.1.a"
		owner = {
			add_resource = { minerals = 300 }
			add_intel = {
				who = event_target:wreckage_owner
				amount = 10
			}
		}
		custom_tooltip = "distar.1.a.tooltip"
		hidden_effect = { owner = { country_event = { id = distar.2 days = 180 } } }
	}
	option = {
		trigger = {
			owner = { NOT = { is_at_war_with = event_target:wreckage_owner } }
		}
		name = "distar.1.b"
		custom_tooltip = "distar.1.b.tooltip"
		hidden_effect = { owner = { country_event = { id = distar.3 days = 60 } } }
	}
}

 ## Make Rudimentary Robots exist
 planet_event = {
	id = distar.2599 #I am sorry
	is_triggered_only = yes
	hide_window = yes

	trigger = {
		has_planet_flag = primitive_robot_planet
	}

	immediate = {
		create_species = {
			name = "NAME_Primitive_Robot"
			plural = "NAME_Primitive_Robots"
			class = ROBOT
			portrait = "default_robot"
			namelist = "PRT1"
			traits = {
				trait = "trait_mechanical"
			}
			effect = {
				set_species_flag = primitive_robots_flag
				save_global_event_target_as = primitive_robot_species
			}
		}
		while = {
			count = 4
			create_pop = {
				species = event_target:primitive_robot_species
			}
		}
		if = {
			limit = {
				owner = {
					is_zofe_compatible = yes
					NOT = { has_country_flag = cured_rage_virus }
				}
			}
			planet_event = { id = distar.26 days = 1 }
		}
	}
}

 ## Rudimentary Robots -> Rage Virus Chain
planet_event = {
	id = distar.26
	title = "distar.26.name"
	desc = "distar.26.desc"
	picture = GFX_evt_organic_oppression
	show_sound = event_scanner
	location = root

	is_triggered_only = yes

	trigger = {
		has_planet_flag = primitive_robot_planet
		any_owned_pop = {
			species = {
				has_species_flag = primitive_robots_flag
			}
		}
		owner = {
			is_zofe_compatible = yes
			NOT = { has_country_flag = cured_rage_virus }
		}
	}

	immediate = {
		planet_event = { id = distar.31 days = 1825 random = 730 }
		set_planet_flag = colony_event
	}

	option = {
		trigger = {
			owner = {
				NOR = {
					has_policy_flag = ai_outlawed
					has_ethic = ethic_gestalt_consciousness
				}
			}
		}
		name = "distar.26.a"
		custom_tooltip = "distar.26.a.tooltip"
		hidden_effect = { planet_event = { id = distar.27 days = 90 random = 10 } }
	}
	option = {
		trigger = {
			owner = { NOT = { has_policy_flag = ai_outlawed } }
		}
		name = "distar.26.b"
		owner = {
			add_resource = { minerals = 100 }
		}
		root = {
			every_owned_pop = {
				limit = { species = { has_species_flag = primitive_robots_flag } }
				kill_pop = yes
			}
		}
	}
	option = {
		trigger = {
			owner = { has_policy_flag = ai_outlawed }
		}
		name = "distar.26.c"
		owner = {
			add_resource = { minerals = 100 }
		}
		root = {
			every_owned_pop = {
				limit = { species = { has_species_flag = primitive_robots_flag } }
				kill_pop = yes
			}
		}
	}
	option = {
		trigger = {
			owner = { has_authority = auth_machine_intelligence }
		}
		name = "distar.26.mach"
		custom_tooltip = "distar.26.a.tooltip"
		hidden_effect = { planet_event = { id = distar.27 days = 90 random = 10 } }
	}

	after = {
		hidden_effect = { remove_modifier = "primitive_robots" }
	}
}

#Sagittarius B2 Machine Intelligence version
ship_event = {
	id = distar.91
	title = "distar.91.name"
	desc = "distar.91.desc"
	picture = GFX_evt_gas_giant
	show_sound = event_ship_bridge
	location = from

	is_triggered_only = yes

	trigger = {
		owner = { has_authority = auth_machine_intelligence }
	}

	immediate = {
		owner = {
			random_neighbor_country = {
				limit = {
					is_zofe_compatible = yes
					has_communications = prev
					NOR = {
						has_ethic = ethic_gestalt_consciousness
						is_at_war_with = prev
						is_country = prev
					}
				}
				save_event_target_as = rum_nation
			}
		}
	}

	option = {
		name = "distar.91.a"
		custom_tooltip = "distar.91.a.tooltip"
		hidden_effect = {
			owner = { country_event = { id = distar.92 days = 30 } }
			owner = { country_event = { id = distar.93 days = 30 } }
		}
	}

	option = {
		name = "distar.91.b"
	}
}

fleet_event = { #Scrap bot!
	id = distar.135
	title = "distar.135.name"
	desc = "distar.135.desc"
	picture = GFX_evt_scavenger_bot
	show_sound = event_construction
	location = event_target:scavenger_bot_system

	is_triggered_only = yes

	trigger = {
		from = { has_star_flag = scavenger_bot_system }
		owner = {
			is_zofe_compatible = yes
			NOT = { has_country_flag = encountered_scavenger_bot }
		}
		exists = event_target:scavenger_bot_fleet
		exists = event_target:scavenger_bot_country
	}

	immediate = {
		random_system = {
			limit = { has_star_flag = scavenger_bot_system }
			save_event_target_as = scavenger_bot_system
		}
		owner = {
			set_country_flag = encountered_scavenger_bot
			establish_communications_no_message = event_target:scavenger_bot_country
			country_event = { id = story.8 days = 15 }
		}
	}

	option = {
		name = DISCONCERTING
	}
}

country_event = { #Death of Scavenger Bot
	id = distar.137
	title = "distar.137.name"
	desc = "distar.137.desc"
	picture = GFX_evt_large_explosion
	show_sound = event_space_battle
	location = FromFromFrom

	is_triggered_only = yes

	trigger = {
		exists = event_target:scavenger_bot_fleet
		FromFromFrom.fleet = {
			is_same_value = event_target:scavenger_bot_fleet
		}
	}

	immediate = {
		set_country_flag = scrapper_killed # Achievement flag

		every_playable_country = {
			limit = {
				has_event_chain = curator_poi_chain
				fromfrom.solar_system = {
					is_point_of_interest = {
						id = curator_poi_scavenger_bot
						event_chain = curator_poi_chain
						owner = prev
					}
				}
			}
			remove_point_of_interest = curator_poi_scavenger_bot
			end_curator_chain = yes
		}
	}

	option = {
		name = OK
		exclusive_trigger = {
			is_zofe_compatible = no
		}
	}

	option = {
		name = "distar.137.a"
		hidden_effect = {
			set_variable = { which = picked_tech value = 0 }
			if = {
				limit = {
					has_technology = tech_ship_armor_5
					has_technology = tech_shields_5
					has_technology = tech_mass_drivers_5
					has_technology = tech_missiles_5
					has_technology = tech_lasers_5
				}
				add_monthly_resource_mult = {
					resource = engineering_research
					value = @tier5researchreward
					min = @tier5researchreward
					max = @tier5researchreward
				}
			}
			else = {
				while = {
					limit = {
						check_variable = {
							which = picked_tech
							value < 2
						}
					}
					count = 5
					random_list = {
						1 = {
							modifier = {
								factor = 0
								has_technology = tech_ship_armor_5
							}
							give_technology = { tech = tech_ship_armor_5 }
							change_variable = { which = "picked_tech" value = 1 }
						}
						1 = {
							modifier = {
								factor = 0
								has_technology = tech_shields_5
							}
							give_technology = { tech = tech_shields_5 }
							change_variable = { which = "picked_tech" value = 1 }
						}
						1 = {
							modifier = {
								factor = 0
								has_technology = tech_mass_drivers_5
							}
							give_technology = { tech = tech_mass_drivers_5 }
							change_variable = { which = "picked_tech" value = 1 }
						}
						1 = {
							modifier = {
								factor = 0
								has_technology = tech_missiles_5
							}
							give_technology = { tech = tech_missiles_5 }
							change_variable = { which = "picked_tech" value = 1 }
						}
						1 = {
							modifier = {
								factor = 0
								has_technology = tech_lasers_5
							}
							give_technology = { tech = tech_lasers_5 }
							change_variable = { which = "picked_tech" value = 1 }
						}
					}
				}
			}
		}
		give_technology = { tech = tech_nanite_repair_system }
		custom_tooltip = distar.137.tooltip
	}

	option = {
		name = "distar.137.paci"
		trigger = {
			has_ethic = ethic_fanatic_pacifist
			has_ethic = ethic_pacifist
			has_ethic = ethic_fanatic_xenophile
			has_ethic = ethic_xenophile
		}
		hidden_effect = {
			set_variable = { which = picked_tech value = 0 }
			if = {
				limit = {
					has_technology = tech_ship_armor_5
					has_technology = tech_shields_5
					has_technology = tech_mass_drivers_5
					has_technology = tech_missiles_5
					has_technology = tech_lasers_5
				}
				add_monthly_resource_mult = {
					resource = engineering_research
					value = @tier5researchreward
					min = @tier5researchreward
					max = @tier5researchreward
				}
			}
			else = {
				while = {
					limit = {
						check_variable = {
							which = picked_tech
							value < 2
						}
					}
					random_list = {
						1 = {
							modifier = {
								factor = 0
								has_technology = tech_ship_armor_5
							}
							give_technology = { tech = tech_ship_armor_5 }
							change_variable = { which = "picked_tech" value = 1 }
							tooltip = {
								give_technology = { tech = tech_ship_armor_5 }
							}
						}
						1 = {
							modifier = {
								factor = 0
								has_technology = tech_shields_5
							}
							give_technology = { tech = tech_shields_5 }
							change_variable = { which = "picked_tech" value = 1 }
							tooltip = {
								give_technology = { tech = tech_shields_5 }
							}
						}
						1 = {
							modifier = {
								factor = 0
								has_technology = tech_mass_drivers_5
							}
							give_technology = { tech = tech_mass_drivers_5 }
							change_variable = { which = "picked_tech" value = 1 }
							tooltip = {
								give_technology = { tech = tech_mass_drivers_5 }
							}
						}
						1 = {
							modifier = {
								factor = 0
								has_technology = tech_missiles_5
							}
							give_technology = { tech = tech_missiles_5 }
							change_variable = { which = "picked_tech" value = 1 }
							tooltip = {
								give_technology = { tech = tech_missiles_5 }
							}
						}
						1 = {
							modifier = {
								factor = 0
								has_technology = tech_lasers_5
							}
							give_technology = { tech = tech_lasers_5 }
							change_variable = { which = "picked_tech" value = 1 }
							tooltip = {
								give_technology = { tech = tech_lasers_5 }
							}
						}
					}
				}
			}
		}
		give_technology = { tech = tech_nanite_repair_system }
	}
}

fleet_event = { #Tiyanki Matriarch
	id = distar.211
	title = "distar.211.name"
	desc = {
		trigger = {
			owner = { has_country_flag = tiyanki_encountered }
		}
		text = "distar.211.desc"
	}
	desc = {
		trigger = {
			owner = { NOT = { has_country_flag = tiyanki_encountered } }
		}
		text = "distar.211.desc.first_enc"
	}
	picture = GFX_evt_ancient_tiyanki
	show_sound = event_space_whale
	location = event_target:elderly_tiyanki_system

	is_triggered_only = yes

	trigger = {
		from = { has_star_flag = elderly_tiyanki_system }
		owner = {
			is_zofe_compatible = yes
			NOT = { has_country_flag = encountered_elderly_tiyanki }
		}
		exists = event_target:elderly_tiyanki_fleet
		exists = event_target:elderly_tiyanki_country
	}

	immediate = {
		random_system = {
			limit = { has_star_flag = elderly_tiyanki_system }
			save_event_target_as = elderly_tiyanki_system
		}
		owner = {
			set_country_flag = encountered_elderly_tiyanki
			capital_scope = { save_event_target_as = pc_home }
			establish_communications_no_message = event_target:elderly_tiyanki_country
			country_event = { id = story.8 days = 15 }
		}
	}

	option = {
		name = INCREDIBLE
		hidden_effect = {
			owner = {
				IF = {
					limit = {
						NOT = { has_country_flag = tiyanki_encountered }
						exists = event_target:tiyanki_country
					}
					establish_contact = {
						who = event_target:tiyanki_country
						location = root.solar_system
					}
					set_country_flag = tiyanki_encountered
				}
			}
		}
	}
}

country_event = { #Death of the Matriarch
	id = distar.212
	title = "distar.212.name"
	desc = "distar.212.desc"
	picture = GFX_evt_ancient_tiyanki
	show_sound = event_space_whale
	location = event_target:dead_matriarch

	is_triggered_only = yes

	trigger = {
		exists = event_target:elderly_tiyanki_fleet
		FromFromFrom.fleet = {
			is_same_value = event_target:elderly_tiyanki_fleet
		}
	}

	immediate = {
		set_country_flag = tiyanki_killed # Achievement flag
		create_ambient_object = {
			type = "elderly_tiyanki_dead_object"
			location = fromfromfrom
			effect = {
				save_event_target_as = dead_matriarch
			}
		}
		every_playable_country = {
			limit = {
				has_event_chain = curator_poi_chain
				fromfrom.solar_system = {
					is_point_of_interest = {
						id = curator_poi_tiyanki
						event_chain = curator_poi_chain
						owner = prev
					}
				}
			}
			remove_point_of_interest = curator_poi_tiyanki
			end_curator_chain = yes
		}
	}

	option = {
		name = "distar.212.a"
		trigger = { NOT = { has_valid_civic = civic_memorialist } }
		hidden_effect = {
			if = {
				limit = { is_zofe_compatible = yes }
				country_event = { id = distar.213 }
				country_event = { id = galcom.110 days = 60 }
			}
		}
	}

	option = {
		name = UNDERSTOOD
		trigger = { has_valid_civic = civic_memorialist }
		hidden_effect = {
			if = {
				limit = { is_zofe_compatible = yes }
				country_event = { id = distar.213 }
				country_event = { id = galcom.110 days = 60 }
			}
		}
	}

	option = {
		name = galactic_features.385.reanimated

		trigger = {
			has_civic = civic_reanimated_armies
		}

		event_target:dead_matriarch = {
			enable_special_project = {
				name = "REANIMATE_TIYANKI_MATRIARCH"
				location = this
				owner = root.owner
			}
		}

		hidden_effect = {
			country_event = { id = distar.213 }
			country_event = { id = galcom.110 days = 60 }
		}
	}
}

fleet_event = { #Junkheap Ratlings
	id = distar.230
	title = "distar.230.name"
	desc = "distar.230.desc"
	picture = GFX_evt_junkheap
	show_sound = event_scanner
	location = root

	is_triggered_only = yes

	trigger = {
		from = { has_star_flag = ratling_system }
		owner = {
			is_zofe_compatible = yes
			NOT = { has_country_flag = discovered_ratlings }
		}
		NOR = {
			exists = event_target:ratling_pre_space_country
			exists = event_target:ratling_country
		}
	}

	immediate = {
		owner = {
			set_country_flag = discovered_ratlings #Every player that enters the system gets this flag
			country_event = { id = story.5 days = 30 }
			random_country = {
				limit = { is_country_type = global_event }
				country_event = { id = distar.232 days = 9000 random = 3600 }
			}
		}
		from = {
			random_system_planet = {
				limit = { has_planet_flag = ratling_planet }
				save_event_target_as = ratling_planet_tar #Used for loc for this event only
			}
		}
		event_target:ratling_capital = {
			add_anomaly = {
				category = DISTAR_RAT_CAT
				target = root.owner
			}
		}
	}

	option = {
		name = CURIOUS
	}

	option = {
		name = SCUM
		exclusive_trigger = {
			owner = {
				is_xenophobe = yes
			}
		}
	}

	option = {
		name = "distar.230.exter"
		exclusive_trigger = {
			owner = {
				has_civic = civic_machine_terminator
			}
		}
	}
}

country_event = { #Create Full Ratling Empire #Root = Global Event Country
	id = distar.236
	hide_window = yes

	is_triggered_only = yes

	fire_only_once = yes

	trigger = {
		NOT = {
			has_country_flag = spawned_ratling_country
		}
		exists = event_target:ratling_pre_space_country
		any_system = {
			has_star_flag = ratling_system
			NOT = { #At least one Ratling system does not have ongoing starbase construction
				any_ship_in_system = {
					is_ship_size = constructor
					is_constructing = starbase
				}
			}
			any_system_planet = {
				has_planet_flag = ratling_planet
				exists = owner
				owner = {
					is_same_value = event_target:ratling_pre_space_country
				}
				NOR = {
					has_orbital_bombardment = yes
					has_ground_combat = yes
					is_planet_class = "pc_broken"
				}
			}
		}
	}

	immediate = {
		every_country = {
			limit = { has_country_flag = discovered_ratlings }
			country_event = { id = distar.237 days = 1 }
		}
		#Create the proper country
		create_country = {
			name = "NAME_Ketling_Multitude"
			ethos = {
				ethic = ethic_materialist
				ethic = ethic_egalitarian
				ethic = ethic_pacifist
			}
			authority = auth_oligarchic
			civics = {
				civic = civic_functional_architecture
				civic = civic_mining_guilds
			}
			flag = {
				icon = {
					category = "zoological"
					file = "flag_zoological_12.dds"
				}
				background = {
					category = "backgrounds"
					file = "00_solid.dds"
				}
				colors = {
					"light_green"
					"yellow"
					"null"
					"null"
				}
			}
			species = event_target:ratling_species
			ignore_initial_colony_error = yes
			type = default

			effect = {
				set_graphical_culture = mammalian_01
				save_global_event_target_as = ratling_country

				##Copy technology
				if = {
					limit = {
						any_playable_country = { is_ai = no }
					}
					random_playable_country = {
						limit = { is_ai = no }
						save_event_target_as = tech_country
					}
					copy_techs_from = {
						target = event_target:tech_country
						except = {
							# Horizon Signal
							tech_akx_worm_1
							tech_akx_worm_2
							tech_akx_worm_3
						}
					}
				}
				else = {
					random_country = {
						limit = { is_zofe_compatible = yes	}
						save_event_target_as = tech_country
					}
					copy_techs_from = {
						target = event_target:tech_country
						except = {
							# Horizon Signal
							tech_akx_worm_1
							tech_akx_worm_2
							tech_akx_worm_3
						}
					}
				}
				if = {
					limit = {
						NOT = { has_technology = tech_starbase_3 }
					}
					give_technology = { tech = tech_starbase_3 }
				}
				if = {
					limit = {
						NOT = { has_technology = tech_destroyers }
					}
					give_technology = { tech = tech_destroyers }
				}
				if = {
					limit = {
						NOT = { has_technology = tech_cruisers }
					}
					give_technology = { tech = tech_cruisers }
				}
			}
		}

		##Prepare the planets
		every_system = {
			limit = {
				has_star_flag = ratling_system
				NOT = { exists = owner }
			}
			every_system_planet = {
				limit = {
					has_planet_flag = ratling_planet
					AND = {
						exists = owner
						owner = {
							is_same_value = event_target:ratling_pre_space_country
						}
					}
					NOR = {
						has_orbital_bombardment = yes
						has_ground_combat = yes
						is_planet_class = "pc_broken"
					}
				}
				set_owner = event_target:ratling_country
				remove_building = building_junkheap
				clear_blockers = yes
				remove_all_armies = yes
				while = {
					count = 25
					create_pop = {
						species = event_target:ratling_species
					}
				}
				while = {
					count = 4
					add_district_and_planet_size_if_needed_effect = {
						district = district_city
					}
				}
				while = {
					count = 2
					add_district_and_planet_size_if_needed_effect = {
						district = district_industrial
					}
				}
				while = {
					count = 3
					add_district_and_planet_size_if_needed_effect = {
						district = district_farming
					}
				}
				while = {
					count = 3
					add_district_and_planet_size_if_needed_effect = {
						district = district_mining
					}
				}
				while = {
					count = 3
					add_district_and_planet_size_if_needed_effect = {
						district = district_generator
					}
				}
				add_building = building_capital
				add_building = building_research_lab_1
				add_building = building_foundry_1
				add_building = building_commercial_zone
				add_building = building_food_processing_facility
				add_building = building_energy_grid
				add_building = building_mineral_purification_plant
				add_building = building_bureaucratic_1
			}

			##Build Starbases
			create_starbase = {
				size = starbase_starhold
				owner = event_target:ratling_country
				module = shipyard
				building = crew_quarters
				effect = {
					set_starbase_module = {
						slot = 1
						module = anchorage
					}
					set_starbase_module = {
						slot = 2
						module = anchorage
					}
					set_starbase_module = {
						slot = 3
						module = trading_hub
					}
				}
			}
		}

		##Destroy old country
		event_target:ratling_pre_space_country = {
			every_owned_pop = { #In case any pops are left behind
				kill_pop = yes
			}
			destroy_country = yes
		}

		#So we don't get "orphaned" pops with no job categories in case of non-Ketling system owners
		every_system = {
			limit = {
				has_star_flag = ratling_system
				OR = {
					NOT = { exists = owner }
					AND = {
						exists = owner
						NOT = {
							is_owned_by = event_target:ratling_country
						}
					}
				}
			}
			every_system_planet = {
				limit = {
					has_planet_flag = ratling_planet
					any_owned_pop = {
						is_same_species = event_target:ratling_species
						NOT = { exists = owner }
					}
				}
				every_owned_pop = {
					limit = {
						is_same_species = event_target:ratling_species
						NOT = { exists = owner }
					}
					kill_pop = yes
				}
			}
		}

		#Create a Capital
		IF = { #If the old capital belongs to Ratlings, use it
			limit = {
				exists = event_target:ratling_capital
				event_target:ratling_capital = {
					exists = owner
					owner = {
						is_same_value = event_target:ratling_country
					}
				}
			}
			event_target:ratling_capital = {
				set_capital = yes
			}
		}
		ELSE = { #Otherwise, make a new Capital
			random_system = {
				limit = { has_star_flag = ratling_system }
				random_system_planet = {
					limit = {
						has_planet_flag = ratling_planet
						exists = owner
						owner = {
							is_same_value = event_target:ratling_country
						}
						planet_size > 12
						NOT = { is_planet_class = "pc_broken" }
					}
					save_global_event_target_as = ratling_capital
					set_capital = yes
				}
			}
		}

		event_target:ratling_country = {

			##Add resources
			add_resource = { minerals = 7000 }
			add_resource = { energy = 7000 }
			add_resource = { food = 3000 }
			add_resource = { consumer_goods = 3000 }
			add_resource = { alloys = 2000 }
			add_resource = { influence = 1000 }
			add_resource = { unity = 27000 }

			event_target:ratling_country = {
				##Create Mining Stations
				every_planet_within_border = {
					limit = {
						has_deposit_for = shipclass_mining_station
					}
					create_mining_station = { owner = event_target:ratling_country }
				}
				##Create fleets
				create_fleet = {
					effect = {
						set_owner = event_target:ratling_country
						while = {
							count = 5
							create_ship = {
								name = random
								random_existing_design = corvette
								graphical_culture = "reptilian_01"
							}
						}
						while = {
							limit = { owner = { has_technology = tech_destroyers } }
							count = 4
							create_ship = {
								name = random
								random_existing_design = destroyer
								graphical_culture = "reptilian_01"
							}
						}
						while = {
							count = 2
							limit = { owner = { has_technology = tech_cruisers } }
							create_ship = {
								name = random
								random_existing_design = cruiser
								graphical_culture = "reptilian_01"
							}
						}
						set_location = {
							target = event_target:ratling_capital
							distance = 10
							angle = random
						}
					}
				}
				create_fleet = {
					effect = {
						set_owner = event_target:ratling_country
						create_ship = {
							name = random
							random_existing_design = constructor
							graphical_culture = "reptilian_01"
						}
						set_location = {
							target = event_target:ratling_capital
							distance = 10
							angle = random
						}
					}
				}
				create_fleet = {
					effect = {
						set_owner = event_target:ratling_country
						create_ship = {
							name = random
							random_existing_design = science
							graphical_culture = "reptilian_01"
						}
						set_location = {
							target = event_target:ratling_capital
							distance = 10
							angle = random
						}
					}
				}
			}

			##Add leaders
			while = {
				count = 4
				create_leader = {
					class = scientist
					species = event_target:ratling_species
					name = random
					skill = 3
				}
			}
			while = {
				count = 1
				create_leader = {
					class = admiral
					species = event_target:ratling_species
					name = random
					skill = 3
				}
			}
			create_leader = {
				class = governor
				species = event_target:ratling_species
				name = random
				skill = 3
			}
		}

		set_country_flag = spawned_ratling_country
	}
}

country_event = { #Death of the Sealed System Psionic Entity
	id = distar.243
	title = "distar.243.name"
	desc = "distar.243.desc"
	picture = GFX_evt_surreal_visions
	show_sound = event_space_cloud
	location = fromfrom

	is_triggered_only = yes

	trigger = {
		exists = event_target:sealed_psionic_entity
		FromFromFrom.fleet = {
			is_same_value = event_target:sealed_psionic_entity
		}
		is_zofe_compatible = yes
	}

	option = {
		name = EXCELLENT
	}
}